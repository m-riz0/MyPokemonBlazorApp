@rendermode InteractiveServer
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager

<div class="row g-0">
    <div class="col-md-12">
        <button class="btn btn-primary float-end" @onclick="ShowAddTrainer">
            Add Trainer
        </button>
    </div>
</div> 

@if (ShowForm)
{
    <div class="=" card>
        <div class="card-body bg-light">
            <h4 class="card-title">
                @(model.Id == 0 ? "Add Trainer" : "Edit Trainer")
            </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="name" class="form-label">Name</label>
                        <InputText class="form-control" placeholder="Name" @bind-Value="model.Name" />
                        <ValidationMessage For="@(() => model.Name)" />
                    </div>
                    <div class="col-md-3">
                        <label for="type" class="form-label">Companion</label>
                        <InputText class="form-control" placeholder="Type" @bind-Value="model.Companion" />
                        <ValidationMessage For="@(() => model.Companion)" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}


<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Companion</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trainers in trainers)
        {
            <tr>
                <td>@trainers.Id</td>
                <td>@trainers.Name</td>
                <td>@trainers.Companion</td>
                <td>
                    <button class="btn btn-success" @onclick="() => Edit(trainers)">Edit</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="() => Delete(trainers)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    private List<Trainer>? trainers;
    private EditContext editContext;
    private Trainer model;
    private bool ShowForm;

    private void Info(Trainer trainers)
    {
        NavigationManager.NavigateTo($"/Info/{trainers.Id}");
    }

    private void ShowAddTrainer()
    {
        model = new Trainer();
        editContext = new EditContext(model);
        ShowForm = true;
    }

    private void Edit(Trainer trainers)
    {
        model = trainers;
        editContext = new EditContext(model);
        ShowForm = true;
    }

    private async Task Submit()
    {
        if (model.Id == 0)
            DbContext.Trainers.Add(model);
        else
            DbContext.Trainers.Update(model);
        await DbContext.SaveChangesAsync();
        await Refresh();
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        model = new Trainer();
        editContext = new EditContext(model);
        trainers = await DbContext.Trainers.ToListAsync();
    }

    private async Task Delete(Trainer trainers)
    {
        DbContext.Trainers.Remove(trainers);
        await DbContext.SaveChangesAsync();
        await Refresh();
    }
}